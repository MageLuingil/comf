#!/bin/bash
# Custom bash prompt
# Author: Daniel Matthies <mageluingil@gmail.com>
# Revised: 2018-08-25
# 
# ----Format----
# [exit-status ][
# long branch name (multiline)
# ][(chroot) ][su-user@][ssh-host:]dir [short branch name ] $ 

__prompt_command() {
	local cmd_ret="$?" # Save command exit status (MUST be first line)
	unset -v ${!PS1_*} # Remove all temporary PS1 customization variables
	
	# Disable history options (we need the full history)
	PROMPT_HISTCONTROL="${HISTCONTROL-$PROMPT_HISTCONTROL}"
	unset -v HISTCONTROL
	
	# Parse the last command from history
	local cmd_num cmd_rest cmd
	read cmd_num cmd_rest < <(HISTTIMEFORMAT='%s ;' history 1)
	IFS=';' read -r _ cmd <<<"$cmd_rest" # Preserve original whitespace and escapes
	
	###############################
	### Save prompt exit status ###
	###############################
	# Only show error exit status, only once per command, and never on the first line
	if [[ -n $PROMPT_LAST_CMD_NUM && $PROMPT_LAST_CMD_NUM != $cmd_num && $cmd_ret -ne 0 ]]; then
		PS1_RETURN="$cmd_ret"
	fi
	
	# Re-evaluate history with original HISTCONTROL value
	if [[ -n "$PROMPT_HISTCONTROL" ]]; then
		# A bug in bash 4.2 causes history -s to delete an extra history entry
		[[ $BASH_VERSION != 4.2* ]] && history -d $cmd_num
		HISTCONTROL="$PROMPT_HISTCONTROL" history -s "$cmd"
	fi
	
	# Save the last effective command number
	read PROMPT_LAST_CMD_NUM _ < <(history 1)
	
	########################
	### VCS Branch Names ###
	########################
	# Git branches
	if [[ -z "$PS1_VCS_BRANCH" ]] && hash __git_ps1 2>/dev/null; then
		PS1_VCS_BRANCH=$(__git_ps1 "(%s)")
	fi
	
	# SVN branches (https://github.com/mcandre/svn-prompt)
	if [[ -z "$PS1_VCS_BRANCH" ]] && hash parse_svn_branch 2>/dev/null; then
		PS1_VCS_BRANCH=$(parse_svn_branch)
	fi
	
	# Long/short branch name (for multiline prompt)
	if ((${#PS1_VCS_BRANCH} > 25)); then
		PS1_VCS_BRANCH_LONG="$PS1_VCS_BRANCH"
	elif ((${#PS1_VCS_BRANCH} > 0)); then
		PS1_VCS_BRANCH_SHORT="$PS1_VCS_BRANCH"
	fi
}
PROMPT_COMMAND="__prompt_command;$PROMPT_COMMAND"

is_ssh() {
	# Check for SSH env vars
	[[ -n "$SSH_TTY" || -n "$SSH_CONNECTION" || -n "$SSH_CLIENT" ]] && return 0
	# Check for SSH parent process recursively
	local name ppid
	read name ppid < <(ps -o comm= -o ppid= -p ${1:-$PPID})
	[[ "$name" =~ sshd ]] && return 0
	(( $ppid <= 1 )) && return 1
	is_ssh $ppid
}

__set_ps1() {
	# Define colors (N = No style)
	local -r N="\[\e[0m\]" R="\[\e[31m\]" Y="\[\e[33m\]" B="\[\e[34m\]" SR="\[\e[1;31m\]" SG="\[\e[1;32m\]" SB="\[\e[1;34m\]"
	
	# Check if user is root
	((EUID == 0)) && local user_color="$SR"
	# Check if using su
	[[ "$(whoami)" != "$(stat -c '%U' "$(tty)")" ]] && local show_user=true
	# Check for SSH & color support
	is_ssh && local show_host=true
	(($(tput colors) >= 256)) && local host_color="${HOSTCOLOR:-\[\e[1;38;5;124m\]}"
	
	PS1="$N"
	PS1+="\${PS1_RETURN:+$Y\$PS1_RETURN$N }" # exit status (if non-zero)
	PS1+="\${PS1_VCS_BRANCH_LONG:+\n$R\$PS1_VCS_BRANCH$N\n}" # multiline for long branch names
	PS1+="${debian_chroot:+($debian_chroot) }" # chroot stuff
	PS1+="${show_user:+${user_color:-$SG}\u$N@}" # username (if su)
	PS1+="${show_host:+${host_color:-$SR}${HOSTNAME:-\h}$N}" # hostname (if SSH)
	[[ -n "$show_user" || -n "$show_host" ]] && PS1+=":"
	PS1+="$B\\w \${PS1_VCS_BRANCH_SHORT:+$R\$PS1_VCS_BRANCH }${user_color:-$SB}\\\$$N " # dir [branch ]$ 
	export PS1 # export for sudo -E
}

__set_ps1
